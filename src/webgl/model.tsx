/* eslint-disable react/no-unknown-property */
/* eslint-disable camelcase */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import {useColorMode} from "theme-ui";



const LIGHT_MODEL_PATH = `/model/meLight.gltf`
const SUCUBUS_MODEL_PATH = `/model/meSucubus.gltf`
const DARK_MODEL_PATH = `/model/meDark.gltf`


export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
    const { nodes: light_nodes, materials: light_materials } = useGLTF(LIGHT_MODEL_PATH);
    const { nodes: dark_nodes, materials: dark_materials } = useGLTF(DARK_MODEL_PATH);
    const { nodes: sucubus_nodes, materials: sucubus_materials } = useGLTF(SUCUBUS_MODEL_PATH);
    const [mode] = useColorMode()


    if ( mode === `strangerThings` ){
        return (
            <group {...props} dispose={null} scale={90}>
                <primitive object={sucubus_nodes.Hips} />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Body.geometry}
                    material={sucubus_materials["Wolf3D_Body.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Body.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.EyeLeft.geometry}
                    material={sucubus_materials["Wolf3D_Eye.001"]}
                    skeleton={sucubus_nodes.EyeLeft.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.EyeRight.geometry}
                    material={sucubus_materials["Wolf3D_Eye.001"]}
                    skeleton={sucubus_nodes.EyeRight.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Outfit_Bottom.geometry}
                    material={sucubus_materials["Wolf3D_Outfit_Bottom.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Outfit_Bottom.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Outfit_Footwear.geometry}
                    material={sucubus_materials["Wolf3D_Outfit_Footwear.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Outfit_Footwear.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Outfit_Top.geometry}
                    material={sucubus_materials["Wolf3D_Outfit_Top.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Outfit_Top.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Teeth.geometry}
                    material={sucubus_materials["Wolf3D_Teeth.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Teeth.skeleton}
                />
                <skinnedMesh
                    geometry={sucubus_nodes.Wolf3D_Head.geometry}
                    material={sucubus_materials["Wolf3D_Skin.001"]}
                    skeleton={sucubus_nodes.Wolf3D_Head.skeleton}
                />
            </group>
        );
    }
    else if ( mode === `dark` ){
        return (
            <group {...props} dispose={null} scale={90}>
                <primitive object={dark_nodes.Hips} />
                <skinnedMesh
                    geometry={dark_nodes.Wolf3D_Body.geometry}
                    material={dark_materials.Wolf3D_Body}
                    skeleton={dark_nodes.Wolf3D_Body.skeleton}
                />
                <skinnedMesh
                    name="EyeLeft"
                    geometry={dark_nodes.EyeLeft.geometry}
                    material={dark_materials.Wolf3D_Eye}
                    skeleton={dark_nodes.EyeLeft.skeleton}
                    morphTargetDictionary={dark_nodes.EyeLeft.morphTargetDictionary}
                    morphTargetInfluences={dark_nodes.EyeLeft.morphTargetInfluences}
                />
                <skinnedMesh
                    name="EyeRight"
                    geometry={dark_nodes.EyeRight.geometry}
                    material={dark_materials.Wolf3D_Eye}
                    skeleton={dark_nodes.EyeRight.skeleton}
                    morphTargetDictionary={dark_nodes.EyeRight.morphTargetDictionary}
                    morphTargetInfluences={dark_nodes.EyeRight.morphTargetInfluences}
                />
                <skinnedMesh
                    geometry={dark_nodes.Wolf3D_Outfit_Bottom.geometry}
                    material={dark_materials.Wolf3D_Outfit_Bottom}
                    skeleton={dark_nodes.Wolf3D_Outfit_Bottom.skeleton}
                />
                <skinnedMesh
                    geometry={dark_nodes.Wolf3D_Outfit_Footwear.geometry}
                    material={dark_materials.Wolf3D_Outfit_Footwear}
                    skeleton={dark_nodes.Wolf3D_Outfit_Footwear.skeleton}
                />
                <skinnedMesh
                    geometry={dark_nodes.Wolf3D_Outfit_Top.geometry}
                    material={dark_materials.Wolf3D_Outfit_Top}
                    skeleton={dark_nodes.Wolf3D_Outfit_Top.skeleton}
                />
                <skinnedMesh
                    name="Wolf3D_Teeth"
                    geometry={dark_nodes.Wolf3D_Teeth.geometry}
                    material={dark_materials.Wolf3D_Teeth}
                    skeleton={dark_nodes.Wolf3D_Teeth.skeleton}
                    morphTargetDictionary={dark_nodes.Wolf3D_Teeth.morphTargetDictionary}
                    morphTargetInfluences={dark_nodes.Wolf3D_Teeth.morphTargetInfluences}
                />
                <skinnedMesh
                    name="Wolf3D_Head"
                    geometry={dark_nodes.Wolf3D_Head.geometry}
                    material={dark_materials.Wolf3D_Skin}
                    skeleton={dark_nodes.Wolf3D_Head.skeleton}
                    morphTargetDictionary={dark_nodes.Wolf3D_Head.morphTargetDictionary}
                    morphTargetInfluences={dark_nodes.Wolf3D_Head.morphTargetInfluences}
                />
            </group>
        );
    }
    return (
        <group {...props} dispose={null} scale={90}>
                <primitive object={light_nodes.Hips} />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Body.geometry}
                    material={light_materials.Wolf3D_Body}
                    skeleton={light_nodes.Wolf3D_Body.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.EyeLeft.geometry}
                    material={light_materials.Wolf3D_Eye}
                    skeleton={light_nodes.EyeLeft.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.EyeRight.geometry}
                    material={light_materials.Wolf3D_Eye}
                    skeleton={light_nodes.EyeRight.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Outfit_Bottom.geometry}
                    material={light_materials.Wolf3D_Outfit_Bottom}
                    skeleton={light_nodes.Wolf3D_Outfit_Bottom.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Outfit_Top.geometry}
                    material={light_materials.Wolf3D_Outfit_Top}
                    skeleton={light_nodes.Wolf3D_Outfit_Top.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Outfit_Footwear.geometry}
                    material={light_materials.Wolf3D_Outfit_Footwear}
                    skeleton={light_nodes.Wolf3D_Outfit_Footwear.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Teeth.geometry}
                    material={light_materials.Wolf3D_Teeth}
                    skeleton={light_nodes.Wolf3D_Teeth.skeleton}
                />
                <skinnedMesh
                    geometry={light_nodes.Wolf3D_Head.geometry}
                    material={light_materials.Wolf3D_Skin}
                    skeleton={light_nodes.Wolf3D_Head.skeleton}
                />
            </group>
    );
}

useGLTF.preload(LIGHT_MODEL_PATH)
useGLTF.preload(DARK_MODEL_PATH)
useGLTF.preload(SUCUBUS_MODEL_PATH)
